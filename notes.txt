work of backend:
-> route change
-> Database connectivity
-> Server-Client interaction

While importing module, __name__ = file name  :  else  __main__

path parameter-> value passed during routing!
dynamic url-> generate url dynamically according to dynamic input1!


URL redirection-> while trying to get to a url, but the host provided may change to get you into the correct url.

##redirect(url_for(function-name))

url building:
we can pass values during url redirction
# redirect(url_for("func",variable=value...))

Jinja & Template Inheritance:
    -> basically formatting in frontend
    -> double curly braces for accesing values {{var}}
    -> render_template("xyz.html", var="val")

    -> we can save the laout html in one file with jinja components in it.
    -> {% extends "layout.html" %} inside the different html file to inherit layout
    -> jinja is also used to make clickable url redirection
    -> ## <a href="{{url_for("func")}}">click</a>

    -> we can add if-else block in html files
    -> {% if cond %}
            <html>
        {% else %}
            <html>
        {% endif %}

    -> storing data in a file, and retreving it through jinja
    -> import py file in app.py, 

Some AI:
    -> claude.ai
    -> perplexity.ai
    -> deepseek.ai

GET & POST:
    -> GET doesn't store data while POST stores the data
    -> POST generally for signup

CSRF attack: (Cross-Site Request Forgery)

WTForms:
    from flask_wtf import FlaskForm
    from wtforms import StringField, PasswordField, SubmitForm...
    from wtforms.validators import DataRequired, Optional, Length, EqualTo...
    class class_name(FlaskForm):


    {{form.submit()}} # for SubmitField

    # import py files into app.py & pass them into routes

    secret key:
    app.config["SECRET_KEY"] = "iuehf92hf00i"
    secret key generation:
        import secrets
        print(secrets.token_hex(14))

    -> inside form:
        {{ form.hidden_tag() }}
    -> how to validate:
        if form.valiadte_on_submit():
            return

flash():
    add jinja to frontend
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            {% for m in messages %}
                html element
            {% endfor %}
        {% endif %}
    {% endwith %} 